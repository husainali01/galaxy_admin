package com.dotcom.jamaatAdmin.activity.Common;import android.app.Dialog;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.graphics.PorterDuff;import android.os.Bundle;import android.support.design.widget.TextInputLayout;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.Window;import android.view.inputmethod.EditorInfo;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import android.widget.ToggleButton;import com.android.volley.VolleyError;import com.google.android.gms.common.ConnectionResult;//import com.google.android.gms.common.GoogleApiAvailability;import com.google.android.gms.common.GoogleApiAvailability;import com.dotcom.jamaatAdmin.util.Constants;import com.dotcom.jamaatAdmin.util.SharedPreferencesManager;import com.dotcom.jamaatAdmin.util.network.NetworkUtil;import com.dotcom.jamaatAdmin.R;import org.json.JSONException;import org.json.JSONObject;import java.util.logging.Handler;/** * A login screen that offers login via email/password. */public class LoginActivity extends BaseActivity {    /**     * Id to identity READ_CONTACTS permission request.     */    private static final int REQUEST_READ_CONTACTS = 0;    private static final int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;    private static final String[] DUMMY_CREDENTIALS = new String[]{            "foo@example.com:hello", "bar@example.com:world"    };    /**     * Keep track of the login task to ensure we can cancel it if requested.     */    //private UserLoginTask mAuthTask = null;    // UI references.    private EditText mEmailView;    private EditText mPasswordView;    private TextInputLayout emailInput , pinInput ;    private TextView mForgotPasswordView,changeUrl;    private View mProgressView;    private View mLoginFormView;    private ProgressDialog dialog;    private NetworkUtil networkUtil;    private Context mContext;    private ToggleButton mKeepMeLoggedInButton;    boolean savePassword = true;    FragmentManager mFragmentManager;    FragmentTransaction mFragmentTransaction;    private int mCounter = 0;    private Handler mHandler ;    int checkchnage;    //    BroadcastReceiver tokenReceiver;    @Override    protected void onCreate(Bundle savedInstanceState) {        setTheme(R.style.AppTheme);        super.onCreate(savedInstanceState);        checkchnage = 0;        String savepassword = SharedPreferencesManager.getStringPreference(Constants.SAVEPASSWORD,null);        String userType = SharedPreferencesManager.getStringPreference(Constants.USERTYPE,null);        if(savepassword!=null && savepassword.equalsIgnoreCase("yes")) {            Intent mainActivityInt = new Intent(this, MainActivity.class);            //mainActivityInt.putExtra("userImageURL",userImageURL);            startActivity(mainActivityInt);            finish();        }        setContentView(R.layout.activity_login);        // Set up the login form.        emailInput = (TextInputLayout) findViewById(R.id.id_layout);        pinInput = (TextInputLayout) findViewById(R.id.pin_layout);        mForgotPasswordView = (TextView) findViewById(R.id.forgot_password_textView);        changeUrl = (TextView) findViewById(R.id.changeUrl);        mEmailView = (EditText) findViewById(R.id.email);        mEmailView.getBackground().setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_ATOP);        mKeepMeLoggedInButton= (ToggleButton) findViewById(R.id.keepMeLoggedInButton);        ImageView mIan_logo = (ImageView)findViewById(R.id.ian_logo) ;        mContext = this;        mPasswordView = (EditText) findViewById(R.id.password);        mPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() {            @Override            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {                if (id == R.id.login || id == EditorInfo.IME_NULL) {                    attemptLogin();                    return true;                }                return false;            }        });        Button mEmailSignInButton = (Button) findViewById(R.id.email_sign_in_button);        mEmailSignInButton.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View view) {                //Calling login web api and check for netowrk availability                if(NetworkUtil.isConnected()) {                    attemptLogin();                }                else                {                    Toast.makeText(mContext,R.string.network_not_connected_error_msg,Toast.LENGTH_LONG).show();                }            }        });        mForgotPasswordView.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                Intent mainActivityInt = new Intent(mContext, ForgotPasswordActivity.class);                startActivity(mainActivityInt);            }        });//        mKeepMeLoggedInButton.setOnClickListener(new OnClickListener() {//            @Override//            public void onClick(View v) {//                savePassword = mKeepMeLoggedInButton.isChecked();////            }//        });        changeUrl.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                showChanUrlDialog(mContext);            }        });        mLoginFormView = findViewById(R.id.login_form);        mProgressView = findViewById(R.id.login_progress);        networkUtil =  new NetworkUtil();//        String fcmToken1  = FirebaseInstanceId.getInstance().getToken();        //If no token is obtained, then get it from GCM server//        if (checkPlayServices() && TextUtils.isEmpty(gcmtoken)) {//            // Start IntentService to register this application with GCM.////            Intent intent = new Intent(this, RegistrationIntentService.class);////            startService(intent);//        }        /**         * On 5 times click on IAN logo it opens change password dialog         */        mIan_logo.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                openChnageURlDialog();            }        });    }    private void openChnageURlDialog() {        checkchnage++;        if(checkchnage >= 5)        {            showChanUrlDialog(mContext);        }    }    private boolean checkPlayServices() {        GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();        int resultCode = apiAvailability.isGooglePlayServicesAvailable(this);        if (resultCode != ConnectionResult.SUCCESS) {            if (apiAvailability.isUserResolvableError(resultCode)) {                apiAvailability.getErrorDialog(this, resultCode, PLAY_SERVICES_RESOLUTION_REQUEST)                        .show();            } else {                Log.i(LoginActivity.class.getSimpleName(), "This device is not supported.");                finish();            }            return false;        }        return true;    }    @Override    protected String getTagName() {        return null;    }    @Override    public void showProgress(boolean show, String tag) {        if (show) {            showDialog();        } else            hideDialog();    }    @Override    public void onSuccess(JSONObject response, String tag) {        Log.v("Login result::", response.toString());        if (tag.equals(Constants.LOGIN)) {            try {                int status = response.getInt("status");                if (status == 200) {                    JSONObject dataObj = response.optJSONObject("data");//                    String token = response.optString("key");                    String message = response.optString("message");//                    if(savePassword) {//                    SharedPreferencesManager.setPreference(Constants.SAVEPASSWORD, "yes");////                    SharedPreferencesManager.setPreference(Constants.TOKEN, token);                        Intent mainActivityInt = new Intent(this, MainActivity.class);                        startActivity(mainActivityInt);                        finish();//                    }//                    finish();                } else {                    mPasswordView.setText("");                    String message = response.optString("message");                    Toast.makeText(this, message, Toast.LENGTH_LONG).show();                }            } catch (JSONException je) {                je.printStackTrace();            }        }    }    @Override    public void onError(VolleyError error, String message, String tag) {        Toast.makeText(mContext,message,Toast.LENGTH_LONG).show();        hideDialog();    }    /**     * Attempts to sign in or register the account specified by the login form.     * If there are form errors (invalid email, missing fields, etc.), the     * errors are presented and no actual login attempt is made.     */    private void attemptLogin() {        // Reset errors.//        mEmailView.setError(null);//        mPasswordView.setError(null);        // Store values at the time of the login attempt.        String email = mEmailView.getText().toString();        String password = mPasswordView.getText().toString();        boolean cancel = false;        View focusView = null;        // Check for a valid password, if the user entered one.        if (password.equalsIgnoreCase("")||password == null) {//            mPasswordView.setError(getString(R.string.error_invalid_password));            pinInput.setError(getString(R.string.error_invalid_password));            focusView = mPasswordView;            cancel = true;        }        // Check for a valid email address.        if (email.equalsIgnoreCase("")||email == null) {//            mEmailView.setError(getString(R.string.error_invalid_email));            emailInput.setError(getString(R.string.error_invalid_email));            focusView = mEmailView;            cancel = true;        }        if (cancel) {            // There was an error; don't attempt login and focus the first            // form field with an error.            focusView.requestFocus();        } else {            // Show a progress spinner, and kick off a background task to            // perform the user login attempt.            // showProgress(true);            JSONObject data = null;            JSONObject loginJsonObj = null;            try {                String fcmToken = SharedPreferencesManager.getStringPreference(Constants.GCM_REGISTRATION_TOKEN, Constants.EMPTY_STRING);                //String regId = "akdbskbfslfs";                loginJsonObj =  new JSONObject();                loginJsonObj.put("user_name",mEmailView.getText().toString());                loginJsonObj.put("user_pin",mPasswordView.getText().toString());//                loginJsonObj.put("pushToken",fcmToken);//                loginJsonObj.put("fcm",fcmToken);   //1 for Android                // data = new JSONObject("{\"email\":" + mEmailView.getText().toString() + ",\"password\":" + mPasswordView.getText().toString() + ",\"pushToken\":" + regId+ "}");            } catch (Exception ex) {            }            //String appendData = "?"+id+ = "1"+""            loadJsonData(Constants.LOGIN, loginJsonObj.toString(), Constants.LOGIN);           /* mAuthTask = new UserLoginTask(email, password);            mAuthTask.execute((Void) null);*/        }    }    private boolean isEmailValid(String email) {        return email.contains("@");    }    private boolean isPasswordValid(String password) {        return password.length() > 4;    }    public void showDialog() {        dialog = new ProgressDialog(LoginActivity.this);        dialog.setMessage("Please wait...");        dialog.setCancelable(true);        dialog.show();    }    public void hideDialog() {        if (dialog != null && dialog.isShowing()) {            dialog.dismiss();        }    }    public void showChanUrlDialog(Context activity){        final Dialog dialog = new Dialog(activity);        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        //dialog.setCancelable(true);        dialog.setContentView(R.layout.change_url);        final EditText urlText = (EditText) dialog.findViewById(R.id.urlText);        String newBaseUrl = SharedPreferencesManager.getStringPreference(Constants.BASE_URL,null);        if(newBaseUrl!=null)        {            urlText.setText(newBaseUrl);        }        Button dialogCancelButton = (Button) dialog.findViewById(R.id.cancelBtn);        dialogCancelButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();            }        });        Button dialogButton = (Button) dialog.findViewById(R.id.changeBtn);        dialogButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                final String newUrl = urlText.getText().toString();                if(newUrl.isEmpty()) {                    urlText.setError("Enter new url");                }                else {                    SharedPreferencesManager.setPreference(Constants.BASE_URL, urlText.getText().toString());                    SharedPreferencesManager.removePreference(Constants.TOKEN);                    SharedPreferencesManager.removePreference(Constants.USERTYPE);                    SharedPreferencesManager.removePreference(Constants.SAVEPASSWORD);                    SharedPreferencesManager.removePreference(Constants.ALLOWEDSTATUS);                    dialog.dismiss();                }            }        });        dialog.show();    }    @Override    public void onBackPressed() {        super.onBackPressed();        finish();    }}