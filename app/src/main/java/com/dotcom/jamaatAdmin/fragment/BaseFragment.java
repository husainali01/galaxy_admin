package com.dotcom.jamaatAdmin.fragment;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.text.TextUtils;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.inputmethod.InputMethodManager;import com.android.volley.AuthFailureError;import com.android.volley.Cache;import com.android.volley.Cache.Entry;import com.android.volley.Request.Method;import com.android.volley.Response;import com.android.volley.VolleyError;import com.dotcom.jamaatAdmin.activity.Common.BaseActivity;import com.dotcom.jamaatAdmin.activity.Common.LoginActivity;import com.dotcom.jamaatAdmin.util.AppUtility;import com.dotcom.jamaatAdmin.util.Constants;import com.dotcom.jamaatAdmin.util.SharedPreferencesManager;import com.dotcom.jamaatAdmin.util.app.IANappApplication;import com.dotcom.jamaatAdmin.util.network.volley.JsonRequest;import com.dotcom.jamaatAdmin.util.network.volley.VolleyErrorListener;import org.json.JSONException;import org.json.JSONObject;import java.io.UnsupportedEncodingException;import java.util.Map;/** * Containing common features to be used in application fragments */public abstract class BaseFragment extends Fragment {	Context context;protected Handler handler;protected FragmentManager fm;public static String TAG_TASK_FRAGMENT = "TAG_TASK_FRAGMENT";protected BaseActivity activity;@Overridepublic void onCreate( @Nullable Bundle savedInstanceState ) {    super.onCreate(savedInstanceState);//    setRetainInstance(true);    fm = getFragmentManager();    handler = new Handler();}@Overridepublic void onAttach( Context context ) {    super.onAttach(context);    if ( context instanceof BaseActivity ) {	   activity = ( BaseActivity ) context;    }}protected void hideSoftKeyboard( Activity ctx, View view ) {    InputMethodManager inputManager = ( InputMethodManager ) ctx			    .getSystemService(Context.INPUT_METHOD_SERVICE);    inputManager.hideSoftInputFromWindow(view.getWindowToken(),								 InputMethodManager.HIDE_NOT_ALWAYS);}protected void showSoftKeyboard( Activity ctx, View view ) {    if ( view.requestFocus() ) {	   InputMethodManager imm = ( InputMethodManager ) ctx.getSystemService(Context.INPUT_METHOD_SERVICE);	   imm.showSoftInput(view, InputMethodManager.SHOW_IMPLICIT);    }}/** * Represents action to be executed when back button is pressed on Activity and then passed on to * fragment. true - if you consumed the back press event. false - if you dont want to consume event * and want default action to be taken. * * @return */public boolean onBackPressed() {    return false;}/** * Represents action to be executed on Alert Dialog Buttons/Items Click * * @param itemPosition */public void onDialogItemSelected( int itemPosition ) {}public abstract void showProgress( boolean show, String tag );public abstract void onSuccess( JSONObject response, String tag );public abstract void onError( VolleyError error, String message, String tag );protected void loadJsonData( String url, String formattedJson,					    final String reqTag ) {    loadJsonData(Method.POST, url, formattedJson, reqTag, false);}protected void loadJsonData( String url, String formattedJson,					    final String reqTag, boolean shouldCache ) {    loadJsonData(Method.POST, url, formattedJson, reqTag, shouldCache);}/** * Method to make json object request where json response starts wtih { */protected void loadJsonData( int type, String url, String formattedJson,					    final String reqTag, boolean shouldCache ) {	String newBaseUrl = SharedPreferencesManager.getStringPreference(Constants.BASE_URL,null);	if(newBaseUrl == null) {		url = Constants.getBaseAPIUrl() + url;	}	else if(newBaseUrl != null && newBaseUrl.length()>0)	{		url = newBaseUrl + url;	}	url = url.replaceAll(" ", "%20");    // Show a progress spinner, and kick off a background task to    // perform the user login attempt.	Log.v("Request Url:::",url);	if(formattedJson != null){		Log.v("Request Param",formattedJson);	}    showProgress(true, reqTag);    Cache cache = IANappApplication.getInstance().getRequestQueue().getCache();    Entry entry = cache.get(url);    if ( entry != null ) {	   try {		  String data = new String(entry.data, Constants.CHARSET);		  JSONObject response = new JSONObject(data);		  onSuccess(response, reqTag);	   } catch ( JSONException je ) {		  je.printStackTrace();	   } catch ( UnsupportedEncodingException e ) {		  e.printStackTrace();	   }	   showProgress(false, reqTag);    }    else {	   JSONObject reqParams = null;	   try {		  reqParams = TextUtils.isEmpty(formattedJson) ? null					  : new JSONObject(formattedJson);	   } catch ( JSONException ex ) {		  ex.printStackTrace();	   }	   JsonRequest jsonObjReq = new JsonRequest(type, url, reqParams,									    new Response.Listener< JSONObject >() {										   @Override										   public void onResponse( JSONObject response ) {												if(response != null){													onSuccess(response, reqTag);													showProgress(false, reqTag);												}										   }									    }, new VolleyErrorListener(getActivity()) {		  @Override		  public void handleVolleyError( VolleyError error,								   String message ) {			  if (error instanceof AuthFailureError) {				  SharedPreferencesManager.removePreference(Constants.SORT);				  SharedPreferencesManager.removePreference(Constants.TOKEN);				  SharedPreferencesManager.removePreference(Constants.USERTYPE);				  SharedPreferencesManager.removePreference(Constants.SAVEPASSWORD);				  SharedPreferencesManager.removePreference(Constants.ALLOWEDSTATUS);				  Intent mainActivityInt = new Intent(getActivity(),LoginActivity.class);				  mainActivityInt.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);				  startActivity(mainActivityInt);			  }			  onError(error, message, reqTag);			  showProgress(false, reqTag);			 onError(error, message, reqTag);			 showProgress(false, reqTag);		  }	   });	   jsonObjReq.setShouldCache(shouldCache);	   // Adding request to request queue		IANappApplication.getInstance().addToRequestQueue(jsonObjReq);    }}	protected void loadJsonData(int type, String url, Map<String,String> formattedJson,								final String reqTag) {		//url = Constants.getBaseAPIUrl() + url;		String newBaseUrl = SharedPreferencesManager.getStringPreference(Constants.BASE_URL,null);		if(newBaseUrl == null) {			url = Constants.getBaseAPIUrl() + AppUtility.getUrlForFilter(url,formattedJson);		}		else if(newBaseUrl != null && newBaseUrl.length()>0)		{			url = newBaseUrl + AppUtility.getUrlForFilter(url,formattedJson);		}		url = url.replaceAll(" ", "%20");		Log.v("get request",url);		// Show a progress spinner, and kick off a background task to		// perform the user login attempt.		showProgress(true, reqTag);		Cache cache = IANappApplication.getInstance().getRequestQueue().getCache();		Cache.Entry entry = cache.get(url);		if (entry != null) {			try {//                String data = new String(entry.data, Constants.CHARSET);				String data = new String(entry.data, Constants.CONTENT_TYPE_JSON);				JSONObject response = new JSONObject(data);				onSuccess(response, reqTag);			} catch (JSONException je) {				je.printStackTrace();			} catch (UnsupportedEncodingException e) {				e.printStackTrace();			}			showProgress(false, reqTag);		} else {			JSONObject reqParams = null;           /* try {                reqParams = TextUtils.isEmpty(formattedJson) ? null                        : new JSONObject(formattedJson);            } catch (JSONException ex) {                ex.printStackTrace();            }*/			JsonRequest jsonObjReq = new JsonRequest(type, url, reqParams,					new Response.Listener<JSONObject>() {						@Override						public void onResponse(JSONObject response) {							onSuccess(response, reqTag);							showProgress(false, reqTag);						}					}, new VolleyErrorListener(context) {				@Override				public void handleVolleyError(VolleyError error,											  String message) {					if (error instanceof AuthFailureError) {						SharedPreferencesManager.removePreference(Constants.SORT);						SharedPreferencesManager.removePreference(Constants.TOKEN);						SharedPreferencesManager.removePreference(Constants.USERTYPE);						SharedPreferencesManager.removePreference(Constants.SAVEPASSWORD);						SharedPreferencesManager.removePreference(Constants.ALLOWEDSTATUS);						Intent mainActivityInt = new Intent(getActivity(),LoginActivity.class);						mainActivityInt.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);						startActivity(mainActivityInt);						//finish();					}					onError(error, message, reqTag);					showProgress(false, reqTag);				}			});			jsonObjReq.setShouldCache(false);			// Adding request to request queue            /*jsonObjReq.setRetryPolicy(new DefaultRetryPolicy(5000,                    DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                    DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));*/			IANappApplication.getInstance().addToRequestQueue(jsonObjReq);		}	}private View rootView;public View getPersistentView( LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState, int layout ) {    if ( rootView == null ) {	   // Inflate the layout for this fragment	   rootView = inflater.inflate(layout, null);    }    else {	   // Do not inflate the layout again.	   // The returned View of onCreateView will be added into the fragment.	   // However it is not allowed to be added twice even if the parent is same.	   // So we must remove rootView from the existing parent view group	   // (it will be added back).	   ( ( ViewGroup ) rootView.getParent() ).removeView(rootView);    }    return rootView;}	/*public void switchFragment(Fragment mTaskFragment) {		switchFragment(mTaskFragment, false, TAG_TASK_FRAGMENT,				R.anim.slide_in_right, R.anim.slide_out_left);	}	public void switchFragment(Fragment mTaskFragment, boolean addTobackstack) {		switchFragment(mTaskFragment, addTobackstack, TAG_TASK_FRAGMENT,				R.anim.slide_in_right, R.anim.slide_out_left);	}	public void switchFragment(Fragment mTaskFragment, boolean addToBackStack,			String tag, int enterAnim, int exitAnim) {		UiUTil.switchFragment(fm, mTaskFragment, addToBackStack, tag,				enterAnim, exitAnim);	}*/public void setActivitytitle( String title ) {    Activity activity = getActivity();		/*if (activity instanceof HomeActivity) {			HomeActivity hActivity = (HomeActivity) activity;			hActivity.getToolBar().setTitle(title);		}*/}/* * Method to handle notification event in fragments. Override this method in subclass to handle notification event itself. *///public void onNotificationRecieved( Notification notification ) {////}public void onActivityResult( int requestCode, int resultCode, Intent data ) {}	public void onDetach (){		super.onDetach();	}}