package com.dotcom.jamaatAdmin.util;import android.content.Context;import android.content.SharedPreferences;import com.dotcom.jamaatAdmin.util.app.IANappApplication;public class SharedPreferencesManager {    private static SharedPreferencesManager manager;    private SharedPreferences sharedPref;    private SharedPreferencesManager() {    }    private static SharedPreferences getSharedPreferencesInstance() {        if (manager == null) {            manager = new SharedPreferencesManager();            Context ctx = IANappApplication.getInstance();            manager.sharedPref = ctx.getSharedPreferences(Constants.IANAPP_PREFERENCE_FILE_KEY, Context.MODE_PRIVATE);        }        return manager.sharedPref;    }    public static void deleteAll() {        getSharedPreferencesInstance().edit().clear().commit();    }    /*    Save string data in Sharedprefrences     */    public static void setPreference(String key, String value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putString(key, value);        editor.commit();    }    public static void setPreference(String key, int value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putInt(key, value);        editor.commit();    }    public static void setPreference(String key, boolean value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putBoolean(key, value);        editor.commit();    }    public static void removePreference(String key) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.remove(key);        editor.commit();    }/*Fetching saved string data from Sharedprefrences */    public static String getStringPreference(String key, String defValue) {        return getSharedPreferencesInstance().getString(key, defValue);    }    public static int getIntPreference(String key, int defValue) {        return getSharedPreferencesInstance().getInt(key, defValue);    }    public static Boolean getBooleanPreference(String key, boolean defValue) {        return getSharedPreferencesInstance().getBoolean(key, defValue);    }    public static void setUserIsCandidate(boolean value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putBoolean("USER_TYPE", value);        editor.commit();    }    public static boolean getUserIsCandidate() {        return getSharedPreferencesInstance().getBoolean("USER_TYPE", false);    }    public static void setUserLogin(boolean value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putBoolean("USER_ALREADY_LOGIN", value);        editor.commit();    }    public static boolean getUserLoginState() {        return getSharedPreferencesInstance().getBoolean("USER_ALREADY_LOGIN", false);    }    public static void setUserEmail(String value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putString("USER_EMAIL", value);        editor.commit();    }    public static String getUserEmail() {        return getSharedPreferencesInstance().getString("USER_EMAIL", "");    }    public static void setUserPassword(String value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putString("USER_PASSWORD", value);        editor.commit();    }    public static String getUserPassword() {        return getSharedPreferencesInstance().getString("USER_PASSWORD", "");    }    public static void setUserID(String value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putString("USER_ID", value);        IANappApplication.getInstance().LOGGED_IN_USED_ID = value;        editor.commit();    }    public static String getUserID() {        IANappApplication.getInstance().LOGGED_IN_USED_ID = getSharedPreferencesInstance().getString("USER_ID", "");        return IANappApplication.getInstance().LOGGED_IN_USED_ID;    }    public static void setCompanyID(String value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putString("COMPANY_ID", value);        editor.commit();    }    public static String getCompanyID() {        return getSharedPreferencesInstance().getString("COMPANY_ID", "");    }    public static void setSessionId(String value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putString("SESSION_ID", value);        IANappApplication.getInstance().SESSION_ID = value;        editor.commit();    }    public static String getSessionId() {        IANappApplication.getInstance().SESSION_ID = getSharedPreferencesInstance().getString("SESSION_ID", "");        return IANappApplication.getInstance().SESSION_ID;    }    public static void setProfileCompleted(boolean value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putBoolean("USER_PROFILE_STATUS", value);        editor.commit();    }    public static boolean getProfileCompleted() {        return getSharedPreferencesInstance().getBoolean("USER_PROFILE_STATUS", false);    }    public static void setUserEmailIsVerified(boolean value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putBoolean("USER_EMAIL_VERIFIED_STATUS", value);        editor.commit();    }    public static boolean getUserEmailIsVerified() {        return getSharedPreferencesInstance().getBoolean("USER_EMAIL_VERIFIED_STATUS", false);    }    public static void setOTPIfUserNotVerified(int value) {        SharedPreferences.Editor editor = getSharedPreferencesInstance().edit();        editor.putInt("USER_VERIFIED_OTP", value);        editor.commit();    }    public static int getOTPIfUserNotVerified() {        return getSharedPreferencesInstance().getInt("USER_VERIFIED_OTP", 0);    }    public static void clearFilter(){        removePreference("city");        removePreference("venture");        removePreference("entrepreneur");        removePreference("leadInvestor");        removePreference("sponsored");        removePreference("assigneeName");        removePreference("checkedDealStatus");        removePreference("checkedDealSectorStatus");        removePreference("sector");        removePreference("workFlowStep");        removePreference("currency");    }    public static void clearCommitmentFilter(){            removePreference("filterBy");            removePreference("investor_name");    }    public static void clearCommittedFilter(){        removePreference("committedInvestor");        removePreference("lead");    }}