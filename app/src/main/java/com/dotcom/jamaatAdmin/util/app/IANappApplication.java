package com.dotcom.jamaatAdmin.util.app;import android.app.Activity;import android.app.Application;import android.content.Context;import android.content.pm.ActivityInfo;import android.graphics.Point;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.provider.Settings;import android.text.TextUtils;import android.util.TypedValue;import android.view.Display;import android.view.Surface;import android.widget.Toast;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.VolleyLog;import com.android.volley.toolbox.ImageLoader;import com.android.volley.toolbox.Volley;import com.google.firebase.analytics.FirebaseAnalytics;//import com.google.firebase.crash.FirebaseCrash;import com.dotcom.jamaatAdmin.R;import java.io.File;import uk.co.chrisjenx.calligraphy.CalligraphyConfig;/*@ReportsCrashes(mailTo = "narender.saini@tekmindz.com", customReportContent = {		ReportField.APP_VERSION_CODE, ReportField.ANDROID_VERSION,		ReportField.PHONE_MODEL, ReportField.CUSTOM_DATA,		ReportField.STACK_TRACE, ReportField.LOGCAT }, mode = ReportingInteractionMode.TOAST, resToastText = R.string.crash_toast_text)*/public class IANappApplication extends Application {    public static final String TAG = IANappApplication.class.getSimpleName();    private RequestQueue mRequestQueue;    private ImageLoader mImageLoader;    private File cacheDir;    private File filesDir;    private FirebaseAnalytics mFirebaseAnalytics;    private static IANappApplication mInstance;    //private static BaseLifeCycleCallbacks lifeCycleCallback;    public String android_id,LOGGED_IN_USED_ID,SESSION_ID;    private static BaseLifeCycleCallbacks lifeCycleCallback;    @Override    public void onCreate() {        super.onCreate();        android_id = Settings.Secure.getString(getApplicationContext().getContentResolver(), Settings.Secure.ANDROID_ID);        //Constants.device_id = android_id;        mInstance = this;        initCalligraphy();        // Obtain the FirebaseAnalytics instance.//        mFirebaseAnalytics = FirebaseAnalytics.getInstance(this);        /**         *  20ae2b4f linked with anjanik@tekmindz.com         *  password - Tekmindz         *///        Mint.initAndStartSession(mInstance, Constants.SPLUNK_KEY);        /**         *  1b82ee3b linked with himanshu@indianangelnetwork.com         *  password - 5plunkm!nt         *///        Mint.initAndStartSession(mInstance, "1b82ee3b");        // The following line triggers the initialization of ACRA        //ACRA.init(this);		/*Constants.updateAPIUrl(SharedPreferencesManager.getStringPreference(				Constants.API_BASE_URL_KEY, Constants.API_BASE_URL));*/        // Register for listening Activity Lifecycle events (Used for checking        // if app is in foreground or background)        lifeCycleCallback = new BaseLifeCycleCallbacks();        registerActivityLifecycleCallbacks(lifeCycleCallback);        //SQLiteDatabaseHelper sqLiteDatabaseHelper = new SQLiteDatabaseHelper(this);        //UploadService.NAMESPACE = "com.ontap.tapp";    }    private void initCalligraphy() {        CalligraphyConfig.initDefault(new CalligraphyConfig.Builder()                .setDefaultFontPath(getString(R.string.font_roboto_light))                .setFontAttrId(R.attr.fontPath)                .build()        );    }    public static void report(){//        FirebaseCrash.report(new Exception("My first Android non-fatal error"));    }    public static synchronized IANappApplication getInstance() {        return mInstance;    }    public RequestQueue getRequestQueue() {        if (mRequestQueue == null) {            mRequestQueue = Volley.newRequestQueue(getApplicationContext());        }        return mRequestQueue;    }	/*public ImageLoader getImageLoader() {		getRequestQueue();		if (mImageLoader == null) {			mImageLoader = new ImageLoader(this.mRequestQueue,					new LruBitmapCache());		}		return this.mImageLoader;	}*/    public <T> void addToRequestQueue(Request<T> req,                                      String tag) {        // set the default tag if tag is empty        req.setTag(TextUtils.isEmpty(tag) ? TAG : tag);        VolleyLog.d("Adding request to queue: %s", req.getUrl());        getRequestQueue().add(req);    }    public <T> void addToRequestQueue(Request<T> req) {        req.setTag(TAG);        getRequestQueue().add(req);    }    /**     * @param message     * Show the toast     */    public void printToast(String message) {        Toast.makeText(getInstance(), message, Toast.LENGTH_SHORT).show();    }    /**     * Create a simple alert dialog.     * @return activeNetworkInfo     */    public boolean isNetworkAvailable() {        final ConnectivityManager connectivityManager = (ConnectivityManager) getInstance()                .getSystemService(Context.CONNECTIVITY_SERVICE);        final NetworkInfo activeNetworkInfo = connectivityManager                .getActiveNetworkInfo();        return activeNetworkInfo != null && activeNetworkInfo.isConnected();    }    public void cancelPendingRequests(Object tag) {        if (mRequestQueue != null) {            mRequestQueue.cancelAll(tag);        }    }    @Override    public File getCacheDir() {        if (cacheDir == null) {            cacheDir = (getExternalCacheDir() != null) ? getExternalCacheDir()                    : super.getCacheDir();        }        return cacheDir;    }    @Override    public File getFilesDir() {        if (filesDir == null) {            filesDir = (getExternalFilesDir(null) != null) ? getExternalFilesDir(null)                    : super.getFilesDir();        }        return filesDir;    }    public int dpToPx(int dp) {        return (int) (getResources().getDisplayMetrics().density * dp + 0.5f);    }    public float pxToDP(int px) {        float dp = px / (getResources().getDisplayMetrics().densityDpi / 160f);        return dp;    }	/*public static void setPreference(String key, String value) {		SharedPreferencesManager.setPreference(key, value);		BeanHelper.addObjectForKey(value, key);	}*/    public static int getScreenOrientation(Activity activity) {        Display display = activity.getWindowManager().getDefaultDisplay();        int rotation = display.getRotation();        Point size = new Point();        display.getSize(size);        int lock = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;        if (rotation == Surface.ROTATION_0 || rotation == Surface.ROTATION_180) {            // if rotation is 0 or 180 and width is greater than height, we have            // a tablet            if (size.x > size.y) {                if (rotation == Surface.ROTATION_0) {                    lock = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;                } else {                    lock = ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;                }            } else {                // we have a phone                if (rotation == Surface.ROTATION_0) {                    lock = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;                } else {                    lock = ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;                }            }        } else {            // if rotation is 90 or 270 and width is greater than height, we            // have a phone            if (size.x > size.y) {                if (rotation == Surface.ROTATION_90) {                    lock = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;                } else {                    lock = ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;                }            } else {                // we have a tablet                if (rotation == Surface.ROTATION_90) {                    lock = ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;                } else {                    lock = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;                }            }        }        return lock;    }    public int getActivityActionBarHeight(){        int actionBarHeight = 0;        // Calculate ActionBar height        TypedValue tv = new TypedValue();        if (getApplicationContext().getTheme().resolveAttribute(R.attr.actionBarSize, tv, true))        {            actionBarHeight = TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());        }        return actionBarHeight;    }    public boolean isBackGround() {        if (lifeCycleCallback != null) {            return lifeCycleCallback.isBackGround();        }        return false;    }}