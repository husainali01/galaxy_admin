package com.dotcom.jamaatAdmin.util.network.volley;import com.android.volley.AuthFailureError;import com.android.volley.Cache;import com.android.volley.DefaultRetryPolicy;import com.android.volley.NetworkResponse;import com.android.volley.ParseError;import com.android.volley.Response;import com.android.volley.Response.ErrorListener;import com.android.volley.Response.Listener;import com.android.volley.RetryPolicy;import com.android.volley.toolbox.HttpHeaderParser;import com.android.volley.toolbox.JsonObjectRequest;import com.dotcom.jamaatAdmin.util.Constants;import com.dotcom.jamaatAdmin.util.SharedPreferencesManager;import org.json.JSONException;import org.json.JSONObject;import java.io.UnsupportedEncodingException;import java.util.Collections;import java.util.HashMap;import java.util.Map;public class JsonRequest extends JsonObjectRequest {	private String acceptType;	private int method;	private static final String REQUEST_HEADER_USERID = "user_id";	private static final String REQUEST_HEADER_AUTH_TOKEN = "SESSION_ID";	private static final String REQUEST_HEADER_DEVICE_ID = "DEVICE_ID";	/**	 * @param method	 * @param url	 * @param params	 *            A {@link HashMap} to post with the request. Null is allowed	 *            and indicates no parameters will be posted along with request.	 * @param listener	 * @param errorListener	 */	public JsonRequest(int method, String url, JSONObject jsonObject,					   Listener<JSONObject> listener, ErrorListener errorListener,					   String acceptType) {		super(method, url, jsonObject, listener, errorListener);		this.acceptType = acceptType;		this.method = method;		this.setRetryPolicy(getRetryPolicy());	}	/**	 * @param method	 * @param url	 * @param params	 *            A {@link HashMap} to post with the request. Null is allowed	 *            and indicates no parameters will be posted along with request.	 * @param listener	 * @param errorListener	 */	public JsonRequest(int method, String url, JSONObject jsonObject,					   Listener<JSONObject> listener, ErrorListener errorListener) {		super(method, url, jsonObject, listener, errorListener);		this.acceptType = Constants.CONTENT_TYPE_JSON;		this.method = method;		this.setRetryPolicy(getRetryPolicy());	}	/*	 * (non-Javadoc)	 * 	 * @see com.android.volley.Request#getHeaders()	 */	@Override	public Map<String, String> getHeaders() throws AuthFailureError {		Map<String, String> headers = super.getHeaders();		if (headers == null || headers.equals(Collections.emptyMap())) {			headers = new HashMap<String, String>();		}		headers.put("Accept", this.acceptType);		if (this.method == Method.GET) {			headers.put("Content-Type", Constants.CONTENT_TYPE_JSON);			headers.put("charset", Constants.CHARSET);		}		String token = SharedPreferencesManager.getStringPreference(Constants.TOKEN,Constants.DEFVALUE);		if(token != null) {			headers.put("Authorization", "Token " + token);		}		//headers.put(REQUEST_HEADER_DEVICE_ID,Constants.device_id);		//	headers.put(REQUEST_HEADER_AUTH_TOKEN, IANappApplication.getInstance().SESSION_ID);		//headers.put(REQUEST_HEADER_USERID,IANappApplication.getInstance().LOGGED_IN_USED_ID);		return headers;	}	@Override	protected Response<JSONObject> parseNetworkResponse(NetworkResponse response) {		try {			String jsonString = new String(response.data,					HttpHeaderParser.parseCharset(response.headers));			if (this.method == Method.GET) {				return Response.success(						new JSONObject(jsonString),						enforceClientCaching(								HttpHeaderParser.parseCacheHeaders(response),								response));			} else {				return Response.success(new JSONObject(jsonString),						HttpHeaderParser.parseCacheHeaders(response));			}		} catch (UnsupportedEncodingException e) {			return Response.error(new ParseError(e));		} catch (JSONException je) {			return Response.error(new ParseError(je));		}	}	//Cache request for atleast 24 hrs	protected static final int defaultClientCacheExpiry = 1000 * 60 * 60 * 24;	protected Cache.Entry enforceClientCaching(Cache.Entry entry,											   NetworkResponse response) {		if (getClientCacheExpiry() == null)			return entry;		long now = System.currentTimeMillis();		if (entry == null) {			entry = new Cache.Entry();			entry.data = response.data;			entry.etag = response.headers.get("ETag");			entry.softTtl = now + getClientCacheExpiry();			entry.ttl = entry.softTtl;			entry.serverDate = now;			entry.responseHeaders = response.headers;		} else if (entry.isExpired()) {			entry.softTtl = now + getClientCacheExpiry();			entry.ttl = entry.softTtl;		}		return entry;	}	protected Integer getClientCacheExpiry() {		return defaultClientCacheExpiry;	}	/**	 * Overriding default timeout of Volley Network Socket Requests	 */	//@Override	public RetryPolicy getRetryPolicy() {		return new DefaultRetryPolicy(Constants.NETWORK_SOCKET_TIMEOUT,				DefaultRetryPolicy.DEFAULT_MAX_RETRIES,				DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);	}}